// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/huuhoait/zero-admin-core/rpc/ent/merchant"
	"github.com/huuhoait/zero-admin-core/rpc/ent/merchantmeta"
)

// MerchantCreate is the builder for creating a Merchant entity.
type MerchantCreate struct {
	config
	mutation *MerchantMutation
	hooks    []Hook
}

// SetCreatedBy sets the "created_by" field.
func (mc *MerchantCreate) SetCreatedBy(s string) *MerchantCreate {
	mc.mutation.SetCreatedBy(s)
	return mc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mc *MerchantCreate) SetNillableCreatedBy(s *string) *MerchantCreate {
	if s != nil {
		mc.SetCreatedBy(*s)
	}
	return mc
}

// SetCreatedAt sets the "created_at" field.
func (mc *MerchantCreate) SetCreatedAt(t time.Time) *MerchantCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MerchantCreate) SetNillableCreatedAt(t *time.Time) *MerchantCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedBy sets the "updated_by" field.
func (mc *MerchantCreate) SetUpdatedBy(s string) *MerchantCreate {
	mc.mutation.SetUpdatedBy(s)
	return mc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mc *MerchantCreate) SetNillableUpdatedBy(s *string) *MerchantCreate {
	if s != nil {
		mc.SetUpdatedBy(*s)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *MerchantCreate) SetUpdatedAt(t time.Time) *MerchantCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *MerchantCreate) SetNillableUpdatedAt(t *time.Time) *MerchantCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetStatus sets the "status" field.
func (mc *MerchantCreate) SetStatus(u uint8) *MerchantCreate {
	mc.mutation.SetStatus(u)
	return mc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mc *MerchantCreate) SetNillableStatus(u *uint8) *MerchantCreate {
	if u != nil {
		mc.SetStatus(*u)
	}
	return mc
}

// SetSort sets the "sort" field.
func (mc *MerchantCreate) SetSort(u uint32) *MerchantCreate {
	mc.mutation.SetSort(u)
	return mc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (mc *MerchantCreate) SetNillableSort(u *uint32) *MerchantCreate {
	if u != nil {
		mc.SetSort(*u)
	}
	return mc
}

// SetName sets the "name" field.
func (mc *MerchantCreate) SetName(s string) *MerchantCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetLeader sets the "leader" field.
func (mc *MerchantCreate) SetLeader(s string) *MerchantCreate {
	mc.mutation.SetLeader(s)
	return mc
}

// SetPhone sets the "phone" field.
func (mc *MerchantCreate) SetPhone(s string) *MerchantCreate {
	mc.mutation.SetPhone(s)
	return mc
}

// SetEmail sets the "email" field.
func (mc *MerchantCreate) SetEmail(s string) *MerchantCreate {
	mc.mutation.SetEmail(s)
	return mc
}

// SetRemark sets the "remark" field.
func (mc *MerchantCreate) SetRemark(s string) *MerchantCreate {
	mc.mutation.SetRemark(s)
	return mc
}

// SetParentID sets the "parent_id" field.
func (mc *MerchantCreate) SetParentID(u uint64) *MerchantCreate {
	mc.mutation.SetParentID(u)
	return mc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (mc *MerchantCreate) SetNillableParentID(u *uint64) *MerchantCreate {
	if u != nil {
		mc.SetParentID(*u)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MerchantCreate) SetID(u uint64) *MerchantCreate {
	mc.mutation.SetID(u)
	return mc
}

// SetParent sets the "parent" edge to the Merchant entity.
func (mc *MerchantCreate) SetParent(m *Merchant) *MerchantCreate {
	return mc.SetParentID(m.ID)
}

// AddChildIDs adds the "children" edge to the Merchant entity by IDs.
func (mc *MerchantCreate) AddChildIDs(ids ...uint64) *MerchantCreate {
	mc.mutation.AddChildIDs(ids...)
	return mc
}

// AddChildren adds the "children" edges to the Merchant entity.
func (mc *MerchantCreate) AddChildren(m ...*Merchant) *MerchantCreate {
	ids := make([]uint64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddChildIDs(ids...)
}

// AddMerchantMetumIDs adds the "merchant_meta" edge to the MerchantMeta entity by IDs.
func (mc *MerchantCreate) AddMerchantMetumIDs(ids ...uint64) *MerchantCreate {
	mc.mutation.AddMerchantMetumIDs(ids...)
	return mc
}

// AddMerchantMeta adds the "merchant_meta" edges to the MerchantMeta entity.
func (mc *MerchantCreate) AddMerchantMeta(m ...*MerchantMeta) *MerchantCreate {
	ids := make([]uint64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddMerchantMetumIDs(ids...)
}

// Mutation returns the MerchantMutation object of the builder.
func (mc *MerchantCreate) Mutation() *MerchantMutation {
	return mc.mutation
}

// Save creates the Merchant in the database.
func (mc *MerchantCreate) Save(ctx context.Context) (*Merchant, error) {
	mc.defaults()
	return withHooks[*Merchant, MerchantMutation](ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MerchantCreate) SaveX(ctx context.Context) *Merchant {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MerchantCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MerchantCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MerchantCreate) defaults() {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := merchant.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		v := merchant.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mc.mutation.Status(); !ok {
		v := merchant.DefaultStatus
		mc.mutation.SetStatus(v)
	}
	if _, ok := mc.mutation.Sort(); !ok {
		v := merchant.DefaultSort
		mc.mutation.SetSort(v)
	}
	if _, ok := mc.mutation.ParentID(); !ok {
		v := merchant.DefaultParentID
		mc.mutation.SetParentID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MerchantCreate) check() error {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Merchant.created_at"`)}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Merchant.updated_at"`)}
	}
	if _, ok := mc.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`ent: missing required field "Merchant.sort"`)}
	}
	if _, ok := mc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Merchant.name"`)}
	}
	if _, ok := mc.mutation.Leader(); !ok {
		return &ValidationError{Name: "leader", err: errors.New(`ent: missing required field "Merchant.leader"`)}
	}
	if _, ok := mc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "Merchant.phone"`)}
	}
	if _, ok := mc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Merchant.email"`)}
	}
	if _, ok := mc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "Merchant.remark"`)}
	}
	return nil
}

func (mc *MerchantCreate) sqlSave(ctx context.Context) (*Merchant, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MerchantCreate) createSpec() (*Merchant, *sqlgraph.CreateSpec) {
	var (
		_node = &Merchant{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(merchant.Table, sqlgraph.NewFieldSpec(merchant.FieldID, field.TypeUint64))
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.CreatedBy(); ok {
		_spec.SetField(merchant.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(merchant.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedBy(); ok {
		_spec.SetField(merchant.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.SetField(merchant.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mc.mutation.Status(); ok {
		_spec.SetField(merchant.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := mc.mutation.Sort(); ok {
		_spec.SetField(merchant.FieldSort, field.TypeUint32, value)
		_node.Sort = value
	}
	if value, ok := mc.mutation.Name(); ok {
		_spec.SetField(merchant.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mc.mutation.Leader(); ok {
		_spec.SetField(merchant.FieldLeader, field.TypeString, value)
		_node.Leader = value
	}
	if value, ok := mc.mutation.Phone(); ok {
		_spec.SetField(merchant.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := mc.mutation.Email(); ok {
		_spec.SetField(merchant.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := mc.mutation.Remark(); ok {
		_spec.SetField(merchant.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if nodes := mc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   merchant.ParentTable,
			Columns: []string{merchant.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(merchant.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   merchant.ChildrenTable,
			Columns: []string{merchant.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(merchant.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.MerchantMetaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   merchant.MerchantMetaTable,
			Columns: []string{merchant.MerchantMetaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(merchantmeta.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MerchantCreateBulk is the builder for creating many Merchant entities in bulk.
type MerchantCreateBulk struct {
	config
	builders []*MerchantCreate
}

// Save creates the Merchant entities in the database.
func (mcb *MerchantCreateBulk) Save(ctx context.Context) ([]*Merchant, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Merchant, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MerchantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MerchantCreateBulk) SaveX(ctx context.Context) []*Merchant {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MerchantCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MerchantCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
