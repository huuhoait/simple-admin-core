// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/huuhoait/zero-admin-core/rpc/ent/merchant"
	"github.com/huuhoait/zero-admin-core/rpc/ent/merchantmeta"
)

// MerchantMeta is the model entity for the MerchantMeta schema.
type MerchantMeta struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// status 1 normal 2 ban | 状态 1 正常 2 禁用
	Status uint8 `json:"status,omitempty"`
	// Sort number | 排序编号
	Sort uint32 `json:"sort,omitempty"`
	// the title shown in the ui | 展示名称 （建议配合i18n）
	Title string `json:"title,omitempty"`
	// key | 键
	Key string `json:"key,omitempty"`
	// value | 值
	Value string `json:"value,omitempty"`
	// Merchant ID | 字典ID
	MerchantID uint64 `json:"merchant_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MerchantMetaQuery when eager-loading is set.
	Edges MerchantMetaEdges `json:"edges"`
}

// MerchantMetaEdges holds the relations/edges for other nodes in the graph.
type MerchantMetaEdges struct {
	// Merchant holds the value of the merchant edge.
	Merchant *Merchant `json:"merchant,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MerchantOrErr returns the Merchant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MerchantMetaEdges) MerchantOrErr() (*Merchant, error) {
	if e.loadedTypes[0] {
		if e.Merchant == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: merchant.Label}
		}
		return e.Merchant, nil
	}
	return nil, &NotLoadedError{edge: "merchant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MerchantMeta) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case merchantmeta.FieldID, merchantmeta.FieldStatus, merchantmeta.FieldSort, merchantmeta.FieldMerchantID:
			values[i] = new(sql.NullInt64)
		case merchantmeta.FieldCreatedBy, merchantmeta.FieldUpdatedBy, merchantmeta.FieldTitle, merchantmeta.FieldKey, merchantmeta.FieldValue:
			values[i] = new(sql.NullString)
		case merchantmeta.FieldCreatedAt, merchantmeta.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MerchantMeta", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MerchantMeta fields.
func (mm *MerchantMeta) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case merchantmeta.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mm.ID = uint64(value.Int64)
		case merchantmeta.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				mm.CreatedBy = value.String
			}
		case merchantmeta.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mm.CreatedAt = value.Time
			}
		case merchantmeta.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				mm.UpdatedBy = value.String
			}
		case merchantmeta.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mm.UpdatedAt = value.Time
			}
		case merchantmeta.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				mm.Status = uint8(value.Int64)
			}
		case merchantmeta.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				mm.Sort = uint32(value.Int64)
			}
		case merchantmeta.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				mm.Title = value.String
			}
		case merchantmeta.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				mm.Key = value.String
			}
		case merchantmeta.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				mm.Value = value.String
			}
		case merchantmeta.FieldMerchantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field merchant_id", values[i])
			} else if value.Valid {
				mm.MerchantID = uint64(value.Int64)
			}
		}
	}
	return nil
}

// QueryMerchant queries the "merchant" edge of the MerchantMeta entity.
func (mm *MerchantMeta) QueryMerchant() *MerchantQuery {
	return NewMerchantMetaClient(mm.config).QueryMerchant(mm)
}

// Update returns a builder for updating this MerchantMeta.
// Note that you need to call MerchantMeta.Unwrap() before calling this method if this MerchantMeta
// was returned from a transaction, and the transaction was committed or rolled back.
func (mm *MerchantMeta) Update() *MerchantMetaUpdateOne {
	return NewMerchantMetaClient(mm.config).UpdateOne(mm)
}

// Unwrap unwraps the MerchantMeta entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mm *MerchantMeta) Unwrap() *MerchantMeta {
	_tx, ok := mm.config.driver.(*txDriver)
	if !ok {
		panic("ent: MerchantMeta is not a transactional entity")
	}
	mm.config.driver = _tx.drv
	return mm
}

// String implements the fmt.Stringer.
func (mm *MerchantMeta) String() string {
	var builder strings.Builder
	builder.WriteString("MerchantMeta(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mm.ID))
	builder.WriteString("created_by=")
	builder.WriteString(mm.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(mm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(mm.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(mm.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", mm.Status))
	builder.WriteString(", ")
	builder.WriteString("sort=")
	builder.WriteString(fmt.Sprintf("%v", mm.Sort))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(mm.Title)
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(mm.Key)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(mm.Value)
	builder.WriteString(", ")
	builder.WriteString("merchant_id=")
	builder.WriteString(fmt.Sprintf("%v", mm.MerchantID))
	builder.WriteByte(')')
	return builder.String()
}

// MerchantMetaSlice is a parsable slice of MerchantMeta.
type MerchantMetaSlice []*MerchantMeta
