// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/huuhoait/zero-admin-core/rpc/ent/merchant"
	"github.com/huuhoait/zero-admin-core/rpc/ent/merchantmeta"
	"github.com/huuhoait/zero-admin-core/rpc/ent/predicate"
)

// MerchantMetaUpdate is the builder for updating MerchantMeta entities.
type MerchantMetaUpdate struct {
	config
	hooks    []Hook
	mutation *MerchantMetaMutation
}

// Where appends a list predicates to the MerchantMetaUpdate builder.
func (mmu *MerchantMetaUpdate) Where(ps ...predicate.MerchantMeta) *MerchantMetaUpdate {
	mmu.mutation.Where(ps...)
	return mmu
}

// SetCreatedBy sets the "created_by" field.
func (mmu *MerchantMetaUpdate) SetCreatedBy(s string) *MerchantMetaUpdate {
	mmu.mutation.SetCreatedBy(s)
	return mmu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mmu *MerchantMetaUpdate) SetNillableCreatedBy(s *string) *MerchantMetaUpdate {
	if s != nil {
		mmu.SetCreatedBy(*s)
	}
	return mmu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (mmu *MerchantMetaUpdate) ClearCreatedBy() *MerchantMetaUpdate {
	mmu.mutation.ClearCreatedBy()
	return mmu
}

// SetUpdatedBy sets the "updated_by" field.
func (mmu *MerchantMetaUpdate) SetUpdatedBy(s string) *MerchantMetaUpdate {
	mmu.mutation.SetUpdatedBy(s)
	return mmu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mmu *MerchantMetaUpdate) SetNillableUpdatedBy(s *string) *MerchantMetaUpdate {
	if s != nil {
		mmu.SetUpdatedBy(*s)
	}
	return mmu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (mmu *MerchantMetaUpdate) ClearUpdatedBy() *MerchantMetaUpdate {
	mmu.mutation.ClearUpdatedBy()
	return mmu
}

// SetUpdatedAt sets the "updated_at" field.
func (mmu *MerchantMetaUpdate) SetUpdatedAt(t time.Time) *MerchantMetaUpdate {
	mmu.mutation.SetUpdatedAt(t)
	return mmu
}

// SetStatus sets the "status" field.
func (mmu *MerchantMetaUpdate) SetStatus(u uint8) *MerchantMetaUpdate {
	mmu.mutation.ResetStatus()
	mmu.mutation.SetStatus(u)
	return mmu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mmu *MerchantMetaUpdate) SetNillableStatus(u *uint8) *MerchantMetaUpdate {
	if u != nil {
		mmu.SetStatus(*u)
	}
	return mmu
}

// AddStatus adds u to the "status" field.
func (mmu *MerchantMetaUpdate) AddStatus(u int8) *MerchantMetaUpdate {
	mmu.mutation.AddStatus(u)
	return mmu
}

// ClearStatus clears the value of the "status" field.
func (mmu *MerchantMetaUpdate) ClearStatus() *MerchantMetaUpdate {
	mmu.mutation.ClearStatus()
	return mmu
}

// SetSort sets the "sort" field.
func (mmu *MerchantMetaUpdate) SetSort(u uint32) *MerchantMetaUpdate {
	mmu.mutation.ResetSort()
	mmu.mutation.SetSort(u)
	return mmu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (mmu *MerchantMetaUpdate) SetNillableSort(u *uint32) *MerchantMetaUpdate {
	if u != nil {
		mmu.SetSort(*u)
	}
	return mmu
}

// AddSort adds u to the "sort" field.
func (mmu *MerchantMetaUpdate) AddSort(u int32) *MerchantMetaUpdate {
	mmu.mutation.AddSort(u)
	return mmu
}

// SetTitle sets the "title" field.
func (mmu *MerchantMetaUpdate) SetTitle(s string) *MerchantMetaUpdate {
	mmu.mutation.SetTitle(s)
	return mmu
}

// SetKey sets the "key" field.
func (mmu *MerchantMetaUpdate) SetKey(s string) *MerchantMetaUpdate {
	mmu.mutation.SetKey(s)
	return mmu
}

// SetValue sets the "value" field.
func (mmu *MerchantMetaUpdate) SetValue(s string) *MerchantMetaUpdate {
	mmu.mutation.SetValue(s)
	return mmu
}

// SetMerchantID sets the "merchant_id" field.
func (mmu *MerchantMetaUpdate) SetMerchantID(u uint64) *MerchantMetaUpdate {
	mmu.mutation.SetMerchantID(u)
	return mmu
}

// SetNillableMerchantID sets the "merchant_id" field if the given value is not nil.
func (mmu *MerchantMetaUpdate) SetNillableMerchantID(u *uint64) *MerchantMetaUpdate {
	if u != nil {
		mmu.SetMerchantID(*u)
	}
	return mmu
}

// ClearMerchantID clears the value of the "merchant_id" field.
func (mmu *MerchantMetaUpdate) ClearMerchantID() *MerchantMetaUpdate {
	mmu.mutation.ClearMerchantID()
	return mmu
}

// SetMerchant sets the "merchant" edge to the Merchant entity.
func (mmu *MerchantMetaUpdate) SetMerchant(m *Merchant) *MerchantMetaUpdate {
	return mmu.SetMerchantID(m.ID)
}

// Mutation returns the MerchantMetaMutation object of the builder.
func (mmu *MerchantMetaUpdate) Mutation() *MerchantMetaMutation {
	return mmu.mutation
}

// ClearMerchant clears the "merchant" edge to the Merchant entity.
func (mmu *MerchantMetaUpdate) ClearMerchant() *MerchantMetaUpdate {
	mmu.mutation.ClearMerchant()
	return mmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mmu *MerchantMetaUpdate) Save(ctx context.Context) (int, error) {
	mmu.defaults()
	return withHooks[int, MerchantMetaMutation](ctx, mmu.sqlSave, mmu.mutation, mmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mmu *MerchantMetaUpdate) SaveX(ctx context.Context) int {
	affected, err := mmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mmu *MerchantMetaUpdate) Exec(ctx context.Context) error {
	_, err := mmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mmu *MerchantMetaUpdate) ExecX(ctx context.Context) {
	if err := mmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mmu *MerchantMetaUpdate) defaults() {
	if _, ok := mmu.mutation.UpdatedAt(); !ok {
		v := merchantmeta.UpdateDefaultUpdatedAt()
		mmu.mutation.SetUpdatedAt(v)
	}
}

func (mmu *MerchantMetaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(merchantmeta.Table, merchantmeta.Columns, sqlgraph.NewFieldSpec(merchantmeta.FieldID, field.TypeUint64))
	if ps := mmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mmu.mutation.CreatedBy(); ok {
		_spec.SetField(merchantmeta.FieldCreatedBy, field.TypeString, value)
	}
	if mmu.mutation.CreatedByCleared() {
		_spec.ClearField(merchantmeta.FieldCreatedBy, field.TypeString)
	}
	if value, ok := mmu.mutation.UpdatedBy(); ok {
		_spec.SetField(merchantmeta.FieldUpdatedBy, field.TypeString, value)
	}
	if mmu.mutation.UpdatedByCleared() {
		_spec.ClearField(merchantmeta.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := mmu.mutation.UpdatedAt(); ok {
		_spec.SetField(merchantmeta.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mmu.mutation.Status(); ok {
		_spec.SetField(merchantmeta.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := mmu.mutation.AddedStatus(); ok {
		_spec.AddField(merchantmeta.FieldStatus, field.TypeUint8, value)
	}
	if mmu.mutation.StatusCleared() {
		_spec.ClearField(merchantmeta.FieldStatus, field.TypeUint8)
	}
	if value, ok := mmu.mutation.Sort(); ok {
		_spec.SetField(merchantmeta.FieldSort, field.TypeUint32, value)
	}
	if value, ok := mmu.mutation.AddedSort(); ok {
		_spec.AddField(merchantmeta.FieldSort, field.TypeUint32, value)
	}
	if value, ok := mmu.mutation.Title(); ok {
		_spec.SetField(merchantmeta.FieldTitle, field.TypeString, value)
	}
	if value, ok := mmu.mutation.Key(); ok {
		_spec.SetField(merchantmeta.FieldKey, field.TypeString, value)
	}
	if value, ok := mmu.mutation.Value(); ok {
		_spec.SetField(merchantmeta.FieldValue, field.TypeString, value)
	}
	if mmu.mutation.MerchantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   merchantmeta.MerchantTable,
			Columns: []string{merchantmeta.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(merchant.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mmu.mutation.MerchantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   merchantmeta.MerchantTable,
			Columns: []string{merchantmeta.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(merchant.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{merchantmeta.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mmu.mutation.done = true

	return n, nil
}

// MerchantMetaUpdateOne is the builder for updating a single MerchantMeta entity.
type MerchantMetaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MerchantMetaMutation
}

// SetCreatedBy sets the "created_by" field.
func (mmuo *MerchantMetaUpdateOne) SetCreatedBy(s string) *MerchantMetaUpdateOne {
	mmuo.mutation.SetCreatedBy(s)
	return mmuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mmuo *MerchantMetaUpdateOne) SetNillableCreatedBy(s *string) *MerchantMetaUpdateOne {
	if s != nil {
		mmuo.SetCreatedBy(*s)
	}
	return mmuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (mmuo *MerchantMetaUpdateOne) ClearCreatedBy() *MerchantMetaUpdateOne {
	mmuo.mutation.ClearCreatedBy()
	return mmuo
}

// SetUpdatedBy sets the "updated_by" field.
func (mmuo *MerchantMetaUpdateOne) SetUpdatedBy(s string) *MerchantMetaUpdateOne {
	mmuo.mutation.SetUpdatedBy(s)
	return mmuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mmuo *MerchantMetaUpdateOne) SetNillableUpdatedBy(s *string) *MerchantMetaUpdateOne {
	if s != nil {
		mmuo.SetUpdatedBy(*s)
	}
	return mmuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (mmuo *MerchantMetaUpdateOne) ClearUpdatedBy() *MerchantMetaUpdateOne {
	mmuo.mutation.ClearUpdatedBy()
	return mmuo
}

// SetUpdatedAt sets the "updated_at" field.
func (mmuo *MerchantMetaUpdateOne) SetUpdatedAt(t time.Time) *MerchantMetaUpdateOne {
	mmuo.mutation.SetUpdatedAt(t)
	return mmuo
}

// SetStatus sets the "status" field.
func (mmuo *MerchantMetaUpdateOne) SetStatus(u uint8) *MerchantMetaUpdateOne {
	mmuo.mutation.ResetStatus()
	mmuo.mutation.SetStatus(u)
	return mmuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mmuo *MerchantMetaUpdateOne) SetNillableStatus(u *uint8) *MerchantMetaUpdateOne {
	if u != nil {
		mmuo.SetStatus(*u)
	}
	return mmuo
}

// AddStatus adds u to the "status" field.
func (mmuo *MerchantMetaUpdateOne) AddStatus(u int8) *MerchantMetaUpdateOne {
	mmuo.mutation.AddStatus(u)
	return mmuo
}

// ClearStatus clears the value of the "status" field.
func (mmuo *MerchantMetaUpdateOne) ClearStatus() *MerchantMetaUpdateOne {
	mmuo.mutation.ClearStatus()
	return mmuo
}

// SetSort sets the "sort" field.
func (mmuo *MerchantMetaUpdateOne) SetSort(u uint32) *MerchantMetaUpdateOne {
	mmuo.mutation.ResetSort()
	mmuo.mutation.SetSort(u)
	return mmuo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (mmuo *MerchantMetaUpdateOne) SetNillableSort(u *uint32) *MerchantMetaUpdateOne {
	if u != nil {
		mmuo.SetSort(*u)
	}
	return mmuo
}

// AddSort adds u to the "sort" field.
func (mmuo *MerchantMetaUpdateOne) AddSort(u int32) *MerchantMetaUpdateOne {
	mmuo.mutation.AddSort(u)
	return mmuo
}

// SetTitle sets the "title" field.
func (mmuo *MerchantMetaUpdateOne) SetTitle(s string) *MerchantMetaUpdateOne {
	mmuo.mutation.SetTitle(s)
	return mmuo
}

// SetKey sets the "key" field.
func (mmuo *MerchantMetaUpdateOne) SetKey(s string) *MerchantMetaUpdateOne {
	mmuo.mutation.SetKey(s)
	return mmuo
}

// SetValue sets the "value" field.
func (mmuo *MerchantMetaUpdateOne) SetValue(s string) *MerchantMetaUpdateOne {
	mmuo.mutation.SetValue(s)
	return mmuo
}

// SetMerchantID sets the "merchant_id" field.
func (mmuo *MerchantMetaUpdateOne) SetMerchantID(u uint64) *MerchantMetaUpdateOne {
	mmuo.mutation.SetMerchantID(u)
	return mmuo
}

// SetNillableMerchantID sets the "merchant_id" field if the given value is not nil.
func (mmuo *MerchantMetaUpdateOne) SetNillableMerchantID(u *uint64) *MerchantMetaUpdateOne {
	if u != nil {
		mmuo.SetMerchantID(*u)
	}
	return mmuo
}

// ClearMerchantID clears the value of the "merchant_id" field.
func (mmuo *MerchantMetaUpdateOne) ClearMerchantID() *MerchantMetaUpdateOne {
	mmuo.mutation.ClearMerchantID()
	return mmuo
}

// SetMerchant sets the "merchant" edge to the Merchant entity.
func (mmuo *MerchantMetaUpdateOne) SetMerchant(m *Merchant) *MerchantMetaUpdateOne {
	return mmuo.SetMerchantID(m.ID)
}

// Mutation returns the MerchantMetaMutation object of the builder.
func (mmuo *MerchantMetaUpdateOne) Mutation() *MerchantMetaMutation {
	return mmuo.mutation
}

// ClearMerchant clears the "merchant" edge to the Merchant entity.
func (mmuo *MerchantMetaUpdateOne) ClearMerchant() *MerchantMetaUpdateOne {
	mmuo.mutation.ClearMerchant()
	return mmuo
}

// Where appends a list predicates to the MerchantMetaUpdate builder.
func (mmuo *MerchantMetaUpdateOne) Where(ps ...predicate.MerchantMeta) *MerchantMetaUpdateOne {
	mmuo.mutation.Where(ps...)
	return mmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mmuo *MerchantMetaUpdateOne) Select(field string, fields ...string) *MerchantMetaUpdateOne {
	mmuo.fields = append([]string{field}, fields...)
	return mmuo
}

// Save executes the query and returns the updated MerchantMeta entity.
func (mmuo *MerchantMetaUpdateOne) Save(ctx context.Context) (*MerchantMeta, error) {
	mmuo.defaults()
	return withHooks[*MerchantMeta, MerchantMetaMutation](ctx, mmuo.sqlSave, mmuo.mutation, mmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mmuo *MerchantMetaUpdateOne) SaveX(ctx context.Context) *MerchantMeta {
	node, err := mmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mmuo *MerchantMetaUpdateOne) Exec(ctx context.Context) error {
	_, err := mmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mmuo *MerchantMetaUpdateOne) ExecX(ctx context.Context) {
	if err := mmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mmuo *MerchantMetaUpdateOne) defaults() {
	if _, ok := mmuo.mutation.UpdatedAt(); !ok {
		v := merchantmeta.UpdateDefaultUpdatedAt()
		mmuo.mutation.SetUpdatedAt(v)
	}
}

func (mmuo *MerchantMetaUpdateOne) sqlSave(ctx context.Context) (_node *MerchantMeta, err error) {
	_spec := sqlgraph.NewUpdateSpec(merchantmeta.Table, merchantmeta.Columns, sqlgraph.NewFieldSpec(merchantmeta.FieldID, field.TypeUint64))
	id, ok := mmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MerchantMeta.id" for update`)}
	}

	//0

	//1

	//2

	_spec.Node.ID.Value = id
	if fields := mmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, merchantmeta.FieldID)
		for _, f := range fields {
			if !merchantmeta.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != merchantmeta.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mmuo.mutation.CreatedBy(); ok {
		_spec.SetField(merchantmeta.FieldCreatedBy, field.TypeString, value)
	}
	if mmuo.mutation.CreatedByCleared() {
		_spec.ClearField(merchantmeta.FieldCreatedBy, field.TypeString)
	}
	if value, ok := mmuo.mutation.UpdatedBy(); ok {
		_spec.SetField(merchantmeta.FieldUpdatedBy, field.TypeString, value)
	}
	if mmuo.mutation.UpdatedByCleared() {
		_spec.ClearField(merchantmeta.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := mmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(merchantmeta.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mmuo.mutation.Status(); ok {
		_spec.SetField(merchantmeta.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := mmuo.mutation.AddedStatus(); ok {
		_spec.AddField(merchantmeta.FieldStatus, field.TypeUint8, value)
	}
	if mmuo.mutation.StatusCleared() {
		_spec.ClearField(merchantmeta.FieldStatus, field.TypeUint8)
	}
	if value, ok := mmuo.mutation.Sort(); ok {
		_spec.SetField(merchantmeta.FieldSort, field.TypeUint32, value)
	}
	if value, ok := mmuo.mutation.AddedSort(); ok {
		_spec.AddField(merchantmeta.FieldSort, field.TypeUint32, value)
	}
	if value, ok := mmuo.mutation.Title(); ok {
		_spec.SetField(merchantmeta.FieldTitle, field.TypeString, value)
	}
	if value, ok := mmuo.mutation.Key(); ok {
		_spec.SetField(merchantmeta.FieldKey, field.TypeString, value)
	}
	if value, ok := mmuo.mutation.Value(); ok {
		_spec.SetField(merchantmeta.FieldValue, field.TypeString, value)
	}
	if mmuo.mutation.MerchantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   merchantmeta.MerchantTable,
			Columns: []string{merchantmeta.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(merchant.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mmuo.mutation.MerchantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   merchantmeta.MerchantTable,
			Columns: []string{merchantmeta.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(merchant.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MerchantMeta{config: mmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{merchantmeta.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}

	//0

	//1

	//2

	mmuo.mutation.done = true

	return _node, nil
}
